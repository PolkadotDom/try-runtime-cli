(function() {var type_impls = {
"libp2p_tcp":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Config\" class=\"impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#64\">source</a><a href=\"#impl-Clone-for-Config\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"libp2p_tcp/struct.Config.html\" title=\"struct libp2p_tcp::Config\">Config</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#64\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"libp2p_tcp/struct.Config.html\" title=\"struct libp2p_tcp::Config\">Config</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.78.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.78.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","libp2p_tcp::GenTcpConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Config\" class=\"impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#154-291\">source</a><a href=\"#impl-Config\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"libp2p_tcp/struct.Config.html\" title=\"struct libp2p_tcp::Config\">Config</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#165-172\">source</a><h4 class=\"code-header\">pub fn <a href=\"libp2p_tcp/struct.Config.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new configuration for a TCP/IP transport:</p>\n<ul>\n<li>Nagle’s algorithm, i.e. <code>TCP_NODELAY</code>, is <em>enabled</em>.\nSee <a href=\"libp2p_tcp/struct.Config.html#method.nodelay\" title=\"method libp2p_tcp::Config::nodelay\"><code>Config::nodelay</code></a>.</li>\n<li>Reuse of listening ports is <em>disabled</em>.\nSee <a href=\"libp2p_tcp/struct.Config.html#method.port_reuse\" title=\"method libp2p_tcp::Config::port_reuse\"><code>Config::port_reuse</code></a>.</li>\n<li>No custom <code>IP_TTL</code> is set. The default of the OS TCP stack applies.\nSee <a href=\"libp2p_tcp/struct.Config.html#method.ttl\" title=\"method libp2p_tcp::Config::ttl\"><code>Config::ttl</code></a>.</li>\n<li>The size of the listen backlog for new listening sockets is <code>1024</code>.\nSee <a href=\"libp2p_tcp/struct.Config.html#method.listen_backlog\" title=\"method libp2p_tcp::Config::listen_backlog\"><code>Config::listen_backlog</code></a>.</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ttl\" class=\"method\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#175-178\">source</a><h4 class=\"code-header\">pub fn <a href=\"libp2p_tcp/struct.Config.html#tymethod.ttl\" class=\"fn\">ttl</a>(self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Configures the <code>IP_TTL</code> option for new sockets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nodelay\" class=\"method\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#181-184\">source</a><h4 class=\"code-header\">pub fn <a href=\"libp2p_tcp/struct.Config.html#tymethod.nodelay\" class=\"fn\">nodelay</a>(self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Configures the <code>TCP_NODELAY</code> option for new sockets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.listen_backlog\" class=\"method\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#187-190\">source</a><h4 class=\"code-header\">pub fn <a href=\"libp2p_tcp/struct.Config.html#tymethod.listen_backlog\" class=\"fn\">listen_backlog</a>(self, backlog: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Configures the listen backlog for new listen sockets.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.port_reuse\" class=\"method\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#287-290\">source</a><h4 class=\"code-header\">pub fn <a href=\"libp2p_tcp/struct.Config.html#tymethod.port_reuse\" class=\"fn\">port_reuse</a>(self, port_reuse: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Configures port reuse for local sockets, which implies\nreuse of listening ports for outgoing connections to\nenhance NAT traversal capabilities.</p>\n<p>Please refer to e.g. <a href=\"https://tools.ietf.org/html/rfc4787\">RFC 4787</a>\nsection 4 and 5 for some of the NAT terminology used here.</p>\n<p>There are two main use-cases for port reuse among local\nsockets:</p>\n<ol>\n<li>\n<p>Creating multiple listening sockets for the same address\nand port to allow accepting connections on multiple threads\nwithout having to synchronise access to a single listen socket.</p>\n</li>\n<li>\n<p>Creating outgoing connections whose local socket is bound to\nthe same address and port as a listening socket. In the rare\ncase of simple NATs with both endpoint-independent mapping and\nendpoint-independent filtering, this can on its own already\npermit NAT traversal by other nodes sharing the observed\nexternal address of the local node. For the common case of\nNATs with address-dependent or address and port-dependent\nfiltering, port reuse for outgoing connections can facilitate\nfurther TCP hole punching techniques for NATs that perform\nendpoint-independent mapping. Port reuse cannot facilitate\nNAT traversal in the presence of “symmetric” NATs that employ\nboth address/port-dependent mapping and filtering, unless\nthere is some means of port prediction.</p>\n</li>\n</ol>\n<p>Both use-cases are enabled when port reuse is enabled, with port reuse\nfor outgoing connections (<code>2.</code> above) always being implied.</p>\n<blockquote>\n<p><strong>Note</strong>: Due to the identification of a TCP socket by a 4-tuple\nof source IP address, source port, destination IP address and\ndestination port, with port reuse enabled there can be only\na single outgoing connection to a particular address and port\nof a peer per local listening socket address.</p>\n</blockquote>\n<p><a href=\"libp2p_tcp/struct.Transport.html\" title=\"struct libp2p_tcp::Transport\"><code>Transport</code></a> keeps track of the listen socket addresses as they\nare reported by polling it. It is possible to listen on multiple\naddresses, enabling port reuse for each, knowing exactly which listen\naddress is reused when dialing with a specific <a href=\"libp2p_tcp/struct.Transport.html\" title=\"struct libp2p_tcp::Transport\"><code>Transport</code></a>, as in the\nfollowing example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"async-io\"</span>)]\n#[async_std::main]\n</span><span class=\"kw\">async fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n\n<span class=\"kw\">let </span>listen_addr1: Multiaddr = <span class=\"string\">\"/ip4/127.0.0.1/tcp/9001\"</span>.parse().unwrap();\n<span class=\"kw\">let </span>listen_addr2: Multiaddr = <span class=\"string\">\"/ip4/127.0.0.1/tcp/9002\"</span>.parse().unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tcp1 = libp2p_tcp::async_io::Transport::new(libp2p_tcp::Config::new().port_reuse(<span class=\"bool-val\">true</span>)).boxed();\ntcp1.listen_on( listen_addr1.clone()).expect(<span class=\"string\">\"listener\"</span>);\n<span class=\"kw\">match </span>tcp1.select_next_some().<span class=\"kw\">await </span>{\n    TransportEvent::NewAddress { listen_addr, .. } =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Listening on {:?}\"</span>, listen_addr);\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stream = tcp1.dial(listen_addr2.clone()).unwrap().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n        <span class=\"comment\">// `stream` has `listen_addr1` as its local socket address.\n    </span>}\n    <span class=\"kw\">_ </span>=&gt; {}\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tcp2 = libp2p_tcp::async_io::Transport::new(libp2p_tcp::Config::new().port_reuse(<span class=\"bool-val\">true</span>)).boxed();\ntcp2.listen_on( listen_addr2).expect(<span class=\"string\">\"listener\"</span>);\n<span class=\"kw\">match </span>tcp2.select_next_some().<span class=\"kw\">await </span>{\n    TransportEvent::NewAddress { listen_addr, .. } =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Listening on {:?}\"</span>, listen_addr);\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>socket = tcp2.dial(listen_addr1).unwrap().<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n        <span class=\"comment\">// `stream` has `listen_addr2` as its local socket address.\n    </span>}\n    <span class=\"kw\">_ </span>=&gt; {}\n}\n<span class=\"prelude-val\">Ok</span>(())\n}</code></pre></div>\n<p>If a wildcard listen socket address is used to listen on any interface,\nthere can be multiple such addresses registered for port reuse. In this\ncase, one is chosen whose IP protocol version and loopback status is the\nsame as that of the remote address. Consequently, for maximum control of\nthe local listening addresses and ports that are used for outgoing\nconnections, a new <a href=\"libp2p_tcp/struct.Transport.html\" title=\"struct libp2p_tcp::Transport\"><code>Transport</code></a> should be created for each listening\nsocket, avoiding the use of wildcard addresses which bind a socket to\nall network interfaces.</p>\n<p>When this option is enabled on a unix system, the socket\noption <code>SO_REUSEPORT</code> is set, if available, to permit\nreuse of listening ports for multiple sockets.</p>\n</div></details></div></details>",0,"libp2p_tcp::GenTcpConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Config\" class=\"impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#64\">source</a><a href=\"#impl-Debug-for-Config\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"libp2p_tcp/struct.Config.html\" title=\"struct libp2p_tcp::Config\">Config</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#64\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.78.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.78.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","libp2p_tcp::GenTcpConfig"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Config\" class=\"impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#293-297\">source</a><a href=\"#impl-Default-for-Config\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"libp2p_tcp/struct.Config.html\" title=\"struct libp2p_tcp::Config\">Config</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/libp2p_tcp/lib.rs.html#294-296\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.78.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","libp2p_tcp::GenTcpConfig"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()