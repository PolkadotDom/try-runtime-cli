searchState.loadedDescShard("bounded_vec", 0, "Non-empty Vec wrapper with lower and upper bounds on items …\nNon-empty Vec bounded with minimal (L - lower bound) and …\nBoundedVec errors\nItems quantity is less than L (lower bound)\nA non-empty Vec with no effective upper-bound on its length\nOption&lt;BoundedVec&lt;T, _, _&gt;&gt; to Vec\nItems quantity is more than U (upper bound)\nExtracts a slice containing the entire vector.\nReturns a reference to underlying `Vec``\nReturn a new BoundedVec with indices included\nReturns the first element of non-empty Vec\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates new BoundedVec or returns error if items count is …\nReturns a reference for an element at index or <code>None</code> if out …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlways returns <code>false</code> (cannot be empty)\nReturns an iterator\nReturns an iterator that allows to modify each value\nReturns the last element of non-empty Vec\nReturns the number of elements in the vector\nCreate a new <code>BoundedVec</code> by consuming <code>self</code> and mapping each …\nCreate a new <code>BoundedVec</code> by mapping references to the …\nReturn a Some(BoundedVec) or None if <code>v</code> is empty\nReturns the last and all the rest of the elements\nOption&lt;BoundedVec&lt;T, _, _&gt;&gt; to Vec\nReturns an underlying `Vec``\nCreate a new <code>BoundedVec</code> by consuming <code>self</code> and mapping each …\nCreate a new <code>BoundedVec</code> by mapping references of <code>self</code> …\nprovided value\nprovided value\nL (lower bound)\nU (upper bound)")