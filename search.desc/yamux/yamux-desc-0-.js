searchState.loadedDescShard("yamux", 0, "This crate implements the Yamux specification.\nClient to server connection.\nAn operation fails because the connection is closed.\nYamux configuration.\nA Yamux connection object.\nThe various error cases a connection may encounter.\nThe Yamux <code>Connection</code> controller.\nDecoding a Yamux message frame failed.\nPossible errors while decoding a message frame.\nA data frame body length is larger than the configured …\nDecoding the frame header failed.\nPossible errors while decoding a message frame header.\nAn underlying I/O error occured.\nAn I/O error.\nHow the connection is used.\nThe whole range of stream IDs has been used up.\nSend window updates only when data is read on the …\nSend window updates as soon as a <code>Stream</code>’s receive window …\nByte data produced by the <code>futures::stream::Stream</code> impl of …\nServer to client connection.\nA multiplexed Yamux stream.\nThe ID of a stream.\nToo many streams are open, so no further ones can be …\nAn unknown frame type.\nUnknown version.\nSpecifies when window update frames are sent.\nAbort an ongoing open stream operation started by …\nClose the connection.\nGet a controller for this connection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet this stream’s identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a Yamux <code>Connection</code> into a <code>futures::Stream</code>.\nCreate a new <code>Connection</code> from the given I/O resource.\nGet the next incoming stream, opened by the remote.\nOpen a new stream to the remote.\n<code>Poll</code> based alternative to <code>Control::close</code>.\n<code>Poll</code> based alternative to <code>Control::open_stream</code>.\nSet the max. buffer size per stream.\nSet the max. number of streams.\nAllow or disallow streams to read from buffered data after …\nSet the receive window per stream (must be &gt;= 256 KiB).\nSet the max. payload size used when sending data frames. …\nSet the window update mode to use.")