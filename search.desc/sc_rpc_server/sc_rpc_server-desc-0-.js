searchState.loadedDescShard("sc_rpc_server", 0, "Substrate RPC servers.\nConfiguration for batch request handling.\nRPC server configuration.\nBatch requests are disabled.\nTrait to generate subscription IDs.\nHolds IPv4 or IPv6 network.\nEach batch request is limited to <code>len</code> and any batch request …\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\nSimilar to <code>tower::ServiceBuilder</code> but doesn’t support any …\nType alias for the JSON-RPC server.\nThe batch request is unlimited.\nSocket addresses.\nBatch request config.\nReturn an iterator of the collapsed IpNetworks.\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>IpAddr</code>. For different …\nCORS.\nConverts <code>IpNetwork</code> to string in format X.X.X.X/Y for IPv4 …\nReturns the argument unchanged.\nConverts <code>Ipv4Addr</code> to <code>IpNetwork</code> with netmask 32.\nConverts <code>Ipv6Addr</code> to <code>IpNetwork</code> with netmask 128.\nConverts <code>IpAddr</code> to <code>IpNetwork</code> with netmask 32 for IPv4 …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts string in format IPv4 (X.X.X.X/Y) or IPv6 …\nConverts string in format IPv4 (X.X.X.X/Y) or IPv6 …\nSubscription ID provider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the network is default route, that …\nReturns <code>true</code> if this is a part of network reserved for …\nReturns <code>true</code> if the network appears to be globally …\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>Ipv4Network</code> struct.\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>Ipv6Network</code> struct.\nReturns <code>true</code> if this network is inside loopback address …\nReturns <code>true</code> if the network is part of multicast network …\nAdd a new layer <code>T</code> to the <code>RpcServiceBuilder</code>.\nAdd a <code>tower::Layer</code> built from a function that accepts a …\nMaximum connections.\nMaximum rpc request payload size.\nMaximum rpc response payload size.\nMaximum subscriptions per connection.\nMessage buffer size\nMetrics.\nJSON-RPC specific middleware.\nReturns network mask as integer.\nReturns network IP address.\nConstructs new <code>IpNetwork</code> based on <code>IpAddr</code> and <code>netmask</code>.\nCreate a new random string provider.\nCreate a new <code>RpcServiceBuilder</code>.\nConstructs new <code>IpNetwork</code> based on <code>IpAddr</code> and <code>netmask</code> with …\nReturns the next ID for the subscription.\nOptionally add a new layer <code>T</code> to the <code>RpcServiceBuilder</code>.\nRate limit calls per minute.\nTrust proxy headers for rate limiting.\nDisable rate limit for certain ips.\nRPC API.\nAdd a logging layer to <code>RpcServiceBuilder</code>\nStart RPC server listening on given address.\nTokio runtime handle.\nSubstrate RPC server utils.\nMetrics with transport label.\nJSON-RPC middleware that handles metrics and rate-limiting.\nJSON-RPC middleware layer.\nRate limit.\nMetrics for RPC middleware storing information about the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an instance of metrics\nCreate a new <code>Metrics</code>.\nCreate an empty MiddlewareLayer.\nCreate a new <code>RateLimit</code> per minute.\nEnable metrics middleware.\nEnable new rate limit middleware enforced per minute.\nRegister a new websocket connection.\nRegister that a websocket connection was closed.")