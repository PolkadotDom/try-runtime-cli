searchState.loadedDescShard("multihash_derive", 0, "A procedural macro for custom Multihash code tables.\nOpaque error struct for operations involving a <code>Multihash</code>.\nTrait implemented by a hash function implementation.\nA Multihash instance that only supports the basic …\nTrait that implements hashing.\nCustom derive for the <code>MultihashDigest</code> trait.\nThe given code is not supported by this codetable.\nReturns the code of the multihash.\nCalculate the hash of some input data.\nReturns the digest.\nReturns the length in bytes needed to encode this …\nReturns the final digest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a multihash from a bytes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecomposes struct, useful when needing a <code>Sized</code> array or …\nReads a multihash from a byte stream.\nReset the internal hasher state.\nResizes the backing multihash buffer.\nReturns the size of the digest.\nReturns the bytes of a multihash.\nTruncates the multihash to the given size. It’s up to …\nConsume input and update internal state.\nCreate a multihash from an existing multihash digest.\nWraps the digest in a multihash.\nWrites a multihash to a byte stream, returning the written …")