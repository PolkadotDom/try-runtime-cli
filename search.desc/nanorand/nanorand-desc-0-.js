searchState.loadedDescShard("nanorand", 0, "A library meant for fast, random number generation with …\nImplementation of cryptography, for CSPRNGs.\nSources for obtaining entropy.\nTraits for generating types from an RNG.\nRNG algorithms.\nImplementation of the ChaCha cryptographic primitives. …\nDo one ChaCha round on the input data.\nIncrement the 64-bit counter of the internal ChaCha20 …\nInitialize the ChaCha internal state, with a 256-bit key …\nThis just panics.\nAn entropy generator for Linux, using libc’s <code>getrandom</code> …\nA wrapper function for non-x86(64) platforms that do not …\nObtain a series of random bytes.\nA trait used for generating a random object with an RNG,\nA trait used for generating a random number within a …\nReturn a random instance of the implementing type, from …\nReturn a ranged number of the implementing type, from the …\nA trait that represents a random number generator.\nA trait that represents an RNG that can be reseeded from …\nFill an array with the specified type.\nFill an array of bytes with randomness.\nGenerates a random of the specified type, seeding from the …\nGenerates a random of the specified type, seeding from the …\nGenerates a random sequence of bytes, seeding from the …\nRe-seed the RNG with the specified bytes.\nShuffle a slice, using the RNG.\nImplementation of the wyrand PRNG algorithm. More details …\nAn instance of the WyRand random number generator. Seeded …\nCreate a new <code>WyRand</code> instance, seeding from the system’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WyRand</code> instance, seeding from the system’s …\nCreate a new <code>WyRand</code> instance, using a provided seed.")