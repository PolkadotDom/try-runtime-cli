searchState.loadedDescShard("jsonrpsee_core", 0, "Shared utilities for <code>jsonrpsee</code>.\nRepresents a JSON array.\nRepresents a JSON boolean.\nCompact three word <code>Cow</code> that puts the ownership tag in …\nA data structure that can be deserialized without …\nEmpty server <code>RpcParams</code> type to use while registering …\nContains the error value\nContains the error value\nReference to a range of bytes encompassing a single valid …\nRepresents any valid JSON value.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nContains the success value\nJSON-RPC result.\nA <strong>data structure</strong> that can be serialized into any data …\nRepresents a JSON string.\nThe return type if the subscription wants to return <code>Result</code>.\nTen megabytes.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nShared utilities for <code>jsonrpsee</code> clients.\nError type.\nDisplay a JSON value as a string.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert a slice to <code>Value::Array</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert copy-on-write string to <code>Value::String</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert string slice to <code>Value::String</code>.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nAccess the JSON text underlying a raw value.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nUtility methods relying on hyper\nSubscription ID providers.\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nRPC Parameters. RPC parameters.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nConvert the given values to a <code>crate::params::ArrayParams</code> …\nSerialize this value into the given Serde serializer.\nShared modules for the JSON-RPC servers.\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nConvert a <code>T</code> into a boxed <code>RawValue</code>.\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nShared tracing helpers to trace RPC calls.\nTraits\nSend a batch request to the server.\nRepresent a single entry in a batch response.\nBatch request message.\nBatch response.\nIncoming packet contains bytes.\nWhat certificate store to use\nJSON-RPC client interface that can make requests and …\nContains the error value\nError that may occur during receiving a message.\nError that may occur during sending a message.\nMessage that the Client can send to the background task.\nJSON-RPC request object id data type.\nMarker trait to determine whether a type implements <code>Send</code> …\nGet notifications based on method name.\nUse the native system certificate store\nSend a notification to the server.\nNumber.\nContains the success value\nIncoming <code>Pong</code> frame as a reply to a previously submitted …\nMessage type received from the RPC server. It can either …\nRegister a notification handler\nRegisterNotification message.\nSend a request to the server.\nReference counted request ID.\nKeep track of request IDs.\nRequest message.\nString.\nSend a subscription request to the server.\nActive subscription on the client.\nGet notifications based on Subscription ID.\nJSON-RPC client interface that can make requests, …\nWhen a subscription channel is closed, we send this …\nSubscription kind\nSubscription message.\nIncoming packet contains plain <code>String</code> data.\nTransport interface to receive data asynchronous.\nTransport interface to send data asynchronous.\nUnregister a notification handler\nUse WebPKI’s certificate store\nGet a handle to the <code>IdKind</code>.\nAbstract async client.\nSend a batch request.\nThis is optional because it’s most likely relevant for …\nError type for client(s).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a range of IDs to be used in a batch request.\nRequest ID.\nRequest IDs.\nGet the actual ID or IDs.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an <code>Id</code> from number.\nReturns <code>Ok(iterator)</code> if all responses were successful …\nIs empty.\nReturns an iterator over all responses.\nReturn the subscription type and, if applicable, ID.\nGet the length of the batch response.\nMethod name this notification handler is attached to\nCreate a new subscription.\nCreate a new <code>RequestIdGuard</code> with the provided concurrency …\nCreate a new <code>BatchResponse</code>.\nReturns the next notification from the stream. This may …\nAttempts to get the next request ID.\nAttempts to get fetch two ids (used for subscriptions) but …\nSend a notification request\nGet the number of failed calls in the batch.\nGet the number of successful calls in the batch.\nSimilar to <code>BatchResponse::into_ok</code> but takes the responses …\nSerialized batch request.\nSerialized message.\nSerialized message.\nReceive.\nSend a method call request.\nSend.\nOne-shot channel over which we send back the result of …\nOne-shot channel over which we send back the result of …\nIf the subscription succeeds, we return a <code>mpsc::Receiver</code> …\nWe return a <code>mpsc::Receiver</code> that will receive notifications.\nThis is optional because it’s most likely relevant for …\nInitiate a subscription by performing a JSON-RPC method …\nRequest ID of the subscribe message.\nRegister a method subscription, this is used to filter …\nUnsubscribe and consume the subscription.\nRequest ID of the unsubscribe message.\nMethod to use to unsubscribe later. Used if the channel …\nGeneric asynchronous client.\nBuilder for <code>Client</code>.\nConfiguration for WebSocket ping/pong mechanism and it may …\nBuild the client with given transport.\nCreate a builder for the server.\nDisable WebSocket ping/pong on the server.\nThis is similar to <code>Client::on_disconnect</code> but it can be …\nEnable WebSocket ping/pong on the client.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the data type of the request object ID (default …\nConfigure how long to wait for the WebSocket pong. When …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the client is connected to the target.\nSet max buffer capacity for each subscription; when the …\nSet max concurrent requests (default is 256).\nConfigure how many times the connection is allowed be …\nCreate a new PingConfig.\nCreate a builder for the client.\nCompletes when the client is disconnected or the client’…\nConfigure the interval when the WebSocket pings are sent …\nSet request timeout (default is 60 seconds).\nSet maximum length for logging calls and responses.\nConfigure <code>TCP_NODELAY</code> on the socket to the supplied value …\nSend a subscription request to the server.\nSubscribe to a specific method.\nJSON-RPC error which can occur when a JSON-RPC call fails.\nCustom error.\nEmpty batch request.\nError type.\nNot implemented for HTTP clients.\nInvalid request ID.\nInvalid subscription ID.\nMax number of request slots exceeded.\nFailed to parse the data.\nThe error returned when registering a method or …\nRequest timeout\nThe background task has been terminated.\nNetworking error or error on the low-level protocol layer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMethod was already registered.\nMethod with that name has not yet been registered.\nThe error returned when registering a method or …\nA type that returns the error as a <code>String</code> from …\nSubscribe and unsubscribe method names are the same.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents error that can when reading with a HTTP body.\nMalformed request\nRepresents error that can happen when dealing with HTTP …\nThe HTTP message was too large.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRead a data from <code>hyper::body::HttpBody</code> and return the data …\nReturns a string value when there is exactly one value for …\nReturns an iterator of all values for a given a header name\nNo-op implementation to be used for servers that don’t …\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new random string provider.\nParameter builder that serializes plain value parameters …\nRequest builder that serializes RPC parameters to …\nError representing an empty batch request.\nParameter builder that serializes named value parameters …\nFinish the building process and return a valid batch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a named value (key, value) pair into the builder. …\nInsert a plain value into the builder.\nInserts the RPC method with provided parameters into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the batch request.\nConstruct a new <code>ObjectParams</code>.\nConstruct a new <code>ArrayParams</code>.\nConstruct a new <code>BatchRequestBuilder</code>.\nFuture of a value\nAsynchronous method handler.\nSimilar to <code>SyncMethod</code>, but represents an asynchronous …\nSerialized batch response.\nBuilder to build a <code>BatchResponse</code>.\nThis wraps <code>tokio::sync::Semaphore</code> and is used to limit the …\nTreat it as ordinary call.\nThis represent a response to a RPC call and <code>Subscribe</code> …\nThe connection channel is closed.\nThe connection channel is closed.\nThe connection was closed.\nComplete JSON message.\nConnection ID, used for stateful protocol such as …\nError that may occur during <code>crate::server::MethodSink::send</code>…\nThe response was the wrong kind such an error response when\nThe connection channel is full.\nSomething that can be converted into a JSON-RPC method …\nConvert something into a subscription close notification …\nInvalid subscription ID.\nRepresents a subscription until it is unsubscribed.\nSpecific JSON-RPC error.\nThe response was a JSON-RPC error.\nMax response size.\nMethod call.\nCallback wrapper that can be either sync or async.\nThe kind of the JSON-RPC method call, it can be a …\nRepresents a response to a method call.\nMethod response error.\nFuture that resolves when the method response has been …\nSends a message once the method response has been …\nResult of a method, either direct value or a future of one.\nReference-counted, clone-on-write collection of …\nThe error that can occur when <code>Methods::call</code> or …\nNeed subscription ID and method name.\nNo further message will be sent.\nThe method was not found.\nSend a subscription notification.\nSend a subscription error notification\nA message that that tells whether notification was …\nThe response was succesfully processed.\nOutput.\nFailed to parse the call as valid JSON-RPC.\nThe error returned while accepting a subscription.\nRepresents a single subscription that is waiting to be …\nRaw response from an RPC A tuple containing:\nSimilar to <code>jsonrpsee_types::ResponsePayload</code> but possible …\nSets of JSON-RPC methods can be organized into “module“…\nError that may occur during …\nType-alias for subscribers.\nWrapper struct that maintains a subscription “mainly” …\nSubscription method handler.\nSubscription Call.\nThe subscription callback itself sends back the result so …\nRepresents what action that will sent when a subscription …\nRepresent a unique subscription entry based on …\nSubscription message.\nA complete subscription message or partial subscription …\nMethod callback for subscriptions.\nSubscription permit.\nRepresents a single subscription that hasn’t been …\nHelper struct to manage subscriptions.\nResult by value\nSynchronous method handler.\nA <code>MethodCallback</code> is an RPC endpoint, callable with a …\nThe data could not be sent because the timeout elapsed …\nError that may occur during …\nUnsubscription method handler.\nUnsubscription Call.\nAttempt to accept the subscription and respond the …\nAttempts to acquire a subscription slot.\nAppend a result from an individual method to the batch …\nGet the error code\nExtract the JSON-RPC response.\nGet a reference to the serialized response.\nCreate a JSON-RPC error response.\nHelper to call a method on the <code>RPC module</code> without having …\nClose the subscription channel.\nCompletes when the subscription has been closed.\nConnection ID\nReturns connection identifier, which was used to perform …\nGet the connection ID.\nCreate a <code>MethodResponse</code> from a JSON-RPC error.\nCreate an error response payload.\nCreate a borrowd error response payload.\nFinish the batch response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new module from an already shared <code>Context</code>.\nCreate a method response from <code>BatchResponse</code>.\nCreate a new subscription message from JSON.\nHelpers.\nID provider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the response payload into owned.\nConsume the method response and extract the parts.\nConvert something into a subscription response\nSomething that can be converted into a JSON-RPC method …\nExtract the JSON-RPC response.\nConsume the method response and extract the serialized …\nReturns whether the response is a batch response.\nReturns whether the subscription is closed.\nCheck if the batch is empty.\nReturns whether the call failed.\nReturns whether the response is a method response.\nReturns whether the response is a subscription response.\nReturns whether the call was successful.\nReturns true if the unsubscribe method has been invoked or …\nGet the maximum number of permitted subscriptions.\nMerge two <code>Methods</code>’s by adding all <code>MethodCallback</code>s from …\nReturns the method callback.\nGet the method name.\nReturns an <code>Iterator</code> with all the method names registered …\nReturns the method callback along with its name. The …\nCreate a subscription message this is more efficient than …\nCreate a new bounded subscription.\nCreate a new module with a given shared <code>Context</code>.\nCreates a new empty <code>Methods</code>.\nCreate a new batch response builder with limit.\nReceives the next value on the subscription if the value …\nSend a notify message.\nConsumes the <code>ResponsePayload</code> and produces new …\nMake a request (JSON-RPC method call or subscription) by …\nRegister an alias for an existing_method. Alias uniqueness …\nRegister a new asynchronous RPC method, which computes the …\nRegister a new <strong>blocking</strong> synchronous RPC method, which …\nRegister a new synchronous RPC method, which computes the …\nRegister a new publish/subscribe interface using JSON-RPC …\nSimilar to <code>RpcModule::register_subscription</code> but a little …\nReject the subscription by responding to the subscription …\nTransform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).\nCreate a new method response.\nSend out a response on the subscription and wait until …\nSimilar to to <code>SubscriptionSink::send</code> but only waits for a …\nSimilar to <code>Methods::subscribe_unbounded</code> but it’s using a …\nHelper to create a subscription on the <code>RPC module</code> without …\nThis is similar to <code>MethodResponse::error</code> but sets a flag …\nGet the subscription ID.\nGet the subscription ID\nSubscription limit\nThis is similar to <code>MethodResponse::response</code> but sets a …\nCreate a successful owned response payload.\nCreate a successful borrowed response payload.\nExtract the serialized response as a String.\nAttempts to immediately send out the message as JSON …\nWrapper over <code>tokio::sync::mpsc::Sender::closed</code>\nInserts the method callback for a given name, or returns …\nVerifies that the method name is not already taken, and …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nSink that is used to send back the result to the server …\nSame as <code>tokio::sync::mpsc::Sender::closed</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWaits for there to be space on the return channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the writer and extract the written bytes.\nReturns whether this channel is closed without needing a …\nGet the max response size.\nCreate a new bounded writer.\nCreate a new <code>MethodSink</code> with unlimited response size.\nCreate a new <code>MethodSink</code> with a limited response size.\nFigure out if this is a sufficiently complete request that …\nAsync send which will wait until there is space in channel …\nSend a JSON-RPC error to the client\nSimilar to to <code>MethodSink::send</code> but only waits for a …\nAttempts to send out the message immediately and fails if …\nLogging with jsonrpsee client target.\nLogging with jsonrpsee server target.\nHelper for writing trace logs from bytes.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from bytes.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nTrait to generate subscription IDs.\nMarker trait for types that can be serialized as JSON …\nReturns the next ID for the subscription.\nConsume and serialize the type as a JSON raw value.")