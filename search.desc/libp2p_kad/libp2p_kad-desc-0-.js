searchState.loadedDescShard("libp2p_kad", 0, "Implementation of the libp2p-specific Kademlia protocol.\nThe <code>α</code> parameter of the Kademlia specification.\nA peer sent a <code>KademliaHandlerIn::AddProvider</code> request. If …\nA (repeated) query initiated by <code>Kademlia::start_providing</code>.\nThe query advertises the local node as a provider for the …\nThe context of a <code>QueryInfo::AddProvider</code> query.\nThe possible errors when publishing a provider record.\nThe successful result of publishing a provider record.\nThe phases of a <code>QueryInfo::AddProvider</code> query.\nThe result of publishing a provider record.\nA non-empty list of (unique) addresses of a peer in the …\nThe result of <code>Kademlia::bootstrap</code>.\nA query initiated by <code>Kademlia::bootstrap</code>.\nThe error result of <code>Kademlia::bootstrap</code>.\nThe successful result of <code>Kademlia::bootstrap</code>.\nThe result of <code>Kademlia::bootstrap</code>.\nThe context is a custom store operation targeting specific …\nCaching is disabled and the peers closest to records being …\nUp to <code>max_peers</code> peers not returning a record that are …\nA cloned, immutable view of an entry that is either …\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nThe routing table update failed, either because the …\nWhenever a (provider) record is received, an event is …\nRequest for the list of nodes whose IDs are the closest to …\nThe result of <code>Kademlia::get_closest_peers</code>.\nA (repeated) query initiated by <code>Kademlia::get_closest_peers</code>…\nThe query is searching for the closest nodes to the record …\nThe query is searching for the closest nodes to the record …\nThe error result of <code>Kademlia::get_closest_peers</code>.\nThe successful result of <code>Kademlia::get_closest_peers</code>.\nThe result of <code>Kademlia::get_closest_peers</code>.\nSame as <code>FindNode</code>, but should also return the entries of …\nThe result of <code>Kademlia::get_providers</code>.\nA (repeated) query initiated by <code>Kademlia::get_providers</code>.\nThe error result of <code>Kademlia::get_providers</code>.\nThe successful result of <code>Kademlia::get_providers</code>.\nThe result of <code>Kademlia::get_providers</code>.\nRequest to retrieve a record.\nThe result of <code>Kademlia::get_record</code>.\nA (repeated) query initiated by <code>Kademlia::get_record</code>.\nThe error result of <code>Kademlia::get_record</code>.\nThe successful result of <code>Kademlia::get_record</code>.\nThe result of <code>Kademlia::get_record</code>.\nInformation about a received and handled inbound request.\nAn inbound request has been received and handled.\nA <code>Key</code> in the DHT keyspace with preserved preimage.\nA reference to a bucket in a <code>KBucketsTable</code>.\nThe <code>k</code> parameter of the Kademlia specification.\n<code>Kademlia</code> is a <code>NetworkBehaviour</code> that implements the libp2p …\nThe configurable strategies for the insertion of peers and …\nThe configuration for Kademlia “write-back” caching …\nThe configuration for the <code>Kademlia</code> behaviour.\nThe events produced by the <code>Kademlia</code> behaviour.\nThe configurable filtering strategies for the acceptance of\nNew peers and addresses are only added to the routing …\nAn operation failed to due no known peers in the routing …\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nWhenever a connection to a peer is established as a result …\nAn outbound query has made progress.\nA record either received by the given peer or retrieved …\nThe peer and address is pending insertion into the routing …\nA connection to a peer has been established for whom a …\nInformation about progress events.\nA record stored in the DHT whose value is the ID of a peer …\nThe context is a <code>Kademlia::start_providing</code> operation.\nThe context is a <code>Kademlia::put_record</code> operation.\nA peer sent a <code>KademliaHandlerIn::PutRecord</code> request. If …\nThe result of <code>Kademlia::put_record</code>.\nA (repeated) query initiated by <code>Kademlia::put_record</code>.\nThe query is replicating the record to the closest nodes …\nThe context of a <code>QueryInfo::PutRecord</code> query.\nThe error result of <code>Kademlia::put_record</code>.\nThe successful result of <code>Kademlia::put_record</code>.\nThe phases of a <code>QueryInfo::PutRecord</code> query.\nThe result of <code>Kademlia::put_record</code>.\nUnique identifier for an active query.\nInformation about a running query.\nA mutable reference to a running query.\nAn immutable reference to a running query.\nThe results of Kademlia queries.\nExecution statistics of a query.\nA quorum w.r.t. the configured replication factor …\nA record stored in the DHT.\nThe (opaque) key of a record.\nThe context is periodic replication (i.e. without extending\nThe context is periodic republishing of provider …\nThe context is periodic republishing of records stored …\nThe result of a (automatic) republishing of a provider …\nThe result of a (automatic) republishing of a …\nA connection to a peer has been established for whom a …\nThe possible outcomes of <code>Kademlia::add_address</code>.\nThe routing table has been updated with a new peer and / or\nThe result of <code>Kademlia::start_providing</code>.\nThe given peer and address has been added to the routing …\nWhenever a (provider) record is received, the record is …\nA peer has connected for whom no listen address is known.\nAdds a known listen address of a peer participating in the …\nThe known addresses that the provider may be listening on.\nBootstraps the local node to join the DHT.\nThe index into the event\nRequire iterative queries to use disjoint paths for …\nGets the duration of the query.\nThe expiration time as measured by a local, monotonic …\nThe expiration time as measured by a local, monotonic …\nFinishes the query asap, without waiting for the regular …\nGets a reference to the first address in the list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns closest peers to the given key; takes peers from …\nInitiates an iterative query for the closest peers to the …\nPerforms a lookup for providers of a value to the given …\nPerforms a lookup for a record in the DHT.\nGets information about the type and state of the query.\nGets information about the type and state of the query.\nAdds a new address to the end of the list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the key of the record for which the operation …\nExtracts the key of the record for which the operation …\nExtracts the key for which the operation failed, consuming …\nExtracts the key for which the operation failed, consuming …\nExtracts the key for which the operation failed,\nConverts the addresses into a <code>Vec</code>.\nReturns an iterator over the addresses.\nGets an iterator over immutable references to all running …\nGets an iterator over mutable references to all running …\nReturns the k-bucket for the distance to the given key.\nReturns an iterator over all non-empty buckets in the …\nGets the key of the record for which the operation failed.\nGets the key of the record for which the operation failed.\nGets the key for which the operation failed.\nGets the key for which the operation failed.\nGets the key for which the operation failed.\nKey of the record.\nThe key whose value is provided by the provider.\nIs this the final event?\nReturns the number of addresses in the list.\nMerges these stats with the given stats of another query, …\nCreates a new <code>Kademlia</code> network behaviour with a default …\nCreates a new list of addresses.\nThe node represented by the entry.\nGets the number of failed requests.\nGets the number of pending requests.\nGets the total number of requests initiated by the query.\nGets the number of successful requests.\nThe peer from whom the record was received. <code>None</code> if the …\nGet the protocol name of this kademlia instance.\nThe provider of the value for the key.\nThe (original) publisher of the record.\nStores a record in the DHT, locally as well as at the nodes\nStores a record at specific peers, without storing it …\nGets an immutable reference to a running query, if it …\nGets a mutable reference to a running query, if it exists.\nRemoves the given address from the list.\nRemoves an address of a peer from the routing table.\nRemoves a peer from the routing table.\nRemoves the record with the given key from <em>local</em> storage, …\nReplaces an old address with a new address.\nSets the <code>KademliaCaching</code> strategy to use for successful …\nSets the amount of time to keep connections alive when they…\nSets the k-bucket insertion strategy for the Kademlia …\nModifies the maximum allowed size of individual Kademlia …\nSets the allowed level of parallelism for iterative …\nSets custom protocol names.\nSets the interval at which provider records for keys …\nSets the TTL for provider records.\nSets the (re-)publication interval of stored records.\nSets the timeout for a single query.\nSets whether or not records should be filtered before …\nSets the TTL for stored records.\nSets the replication factor to use.\nSets the (re-)replication interval for stored records.\nEstablishes the local node as a provider of a value for …\nGets execution statistics about the query.\nGets execution statistics about the query.\nThe status of the node.\nStops the local node from announcing that it is a provider …\nGets a mutable reference to the record store.\nValue of the record.\nCreates a new <code>Kademlia</code> network behaviour with the given …\nThe external addresses of the provider being advertised.\nQuery statistics from the finished <code>GetClosestPeers</code> phase.\nThe local peer ID that is advertised as a provider.\nThe new set of providers discovered.\nIf caching is enabled, these are the peers closest <em>to the </em>…\nThe full list of known addresses of <code>peer</code>.\nReturns the minimum inclusive and maximum inclusive …\nThe ID of the query that finished.\nWhether this is a new peer and was thus just added to the …\nThe ID of the peer that was evicted from the routing table …\nThe ID of the peer that was added or updated.\nThe intermediate result of the query.\nExecution statistics from the query.\nIndicates which event this is, if therer are multiple …\n<code>PeerId</code>s of the peers the record was successfully stored on.\n<code>PeerId</code>s of the peers the record was successfully stored on.\nQuery statistics from the finished <code>GetClosestPeers</code> phase.\nA list of peers the given record has been successfully …\nThe peers closest to the <code>key</code> that were queried but did not …\nThe execution context of the query.\nThe execution context of the query.\nDid we find at least one record?\nThe key being queried (the preimage).\nThe key for which to search for providers.\nThe record key.\nThe key to look for.\nThe targeted peer ID.\nThe current phase of the query.\nThe current phase of the query.\nThe number of providers found so far.\nThe expected quorum of responses w.r.t. the replication …\nThe remaining random peer IDs to query, one per bucket …\nCurrent index of events.\nCurrent index of events.\nCurrent index of events.\nThe peer announced itself as a provider of a key.\nIndicates that this provider is known for this key.\nRequest for the list of nodes whose IDs are the closest to …\nRequest for the list of nodes whose IDs are the closest to …\nResponse to an <code>KademliaHandlerIn::FindNodeReq</code>.\nResponse to a <code>FindNodeReq</code>.\nSame as <code>FindNodeReq</code>, but should also return the entries of …\nSame as <code>FindNodeReq</code>, but should also return the entries of …\nResponse to an <code>KademliaHandlerIn::GetProvidersReq</code>.\nResponse to a <code>GetProvidersReq</code>.\nRequest to get a value from the dht records\nRequest to retrieve a record from the DHT.\nResponse to a <code>KademliaHandlerIn::GetRecord</code>.\nResponse to a <code>GetRecord</code> request.\nI/O error in the substream.\nProtocol handler that manages substreams for the Kademlia …\nConfiguration of a <code>KademliaHandler</code>.\nEvent produced by the Kademlia handler.\nEvent to send to the handler.\nError that can happen when requesting an RPC query.\nUnique identifier for a request. Must be passed back in …\nThe configured protocol name has been confirmed by the …\nRequest to put a value in the dht records\nPut a value into the dht records.\nResponse to a request to store a record.\nResponse to a <code>PutRecord</code>.\nAn error happened when performing a query.\nResets the (sub)stream associated with the given request …\nReceived an answer that doesn’t correspond to the …\nError while trying to perform the query.\nIf false, we deny incoming requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTime after which we close an idle connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>KademliaHandler</code> using the given configuration.\nConfiguration of the wire protocol.\nResults of the request.\nNodes closest to the key.\nNodes closest to the key.\nThe error that happened.\nThe key for which to locate the closest nodes.\nThe key for which providers are requested.\nThe key for which the peer is a provider of the associated …\nKey for which we should look in the dht\nThe key of the stored record.\nThe peer that is the provider of the value for <code>key</code>.\nKnown providers for this key.\nThe result is present if the key has been found\nIdentifier of the request. Needs to be passed back when …\nIdentifier of the request. Needs to be passed back when …\nIdentifier of the request. Needs to be passed back when …\nIdentifier of the request. Needs to be passed back when …\nThe user data passed to the <code>FindNodeReq</code>.\nThe user data passed to the <code>GetProvidersReq</code>.\nThe user data passed to the query.\nThe user data passed to the <code>GetValue</code>.\nThe user data passed to the <code>PutValue</code>.\nThe value of the stored record.\nResults of the request.\nNodes closest to the key.\nNodes that are closer to the key we were searching for.\nIdentifier of the node.\nIdentifier being searched.\nKey for which we should add providers.\nThe key of the record.\nKey of the value that was put.\nKnown provider for this key.\nKnown providers for this key.\nThe value that might have been found in our storage.\nIdentifier of the request that was made by the remote.\nIdentifier of the request that was made by the remote.\nIdentifier of the request that was made by the remote.\nIdentifier of the request that was made by the remote.\nCustom user data. Passed back in the out event when the …\nCustom user data. Passed back in the out event when the …\nCustom data. Passed back in the out event when the results …\nCustom data. Passed back in the out event when the results …\nValue that was put.\nThe entry is absent and may be inserted.\nAn entry that is not present in any bucket.\nThe result of applying a pending node to a bucket, possibly\nThe node is considered connected.\nThe node is considered disconnected.\nA distance between two keys in the DHT keyspace.\nA reference into a single entry of a <code>KBucketsTable</code>.\nAn immutable by-reference view of a bucket entry.\nA cloned, immutable view of an entry that is either …\nThe entry was not inserted because the relevant bucket is …\nThe result of inserting an entry into a bucket.\nThe entry has been successfully inserted.\nA reference to a bucket in a <code>KBucketsTable</code>.\nA <code>KBucketsTable</code> represents a Kademlia routing table.\nA <code>Key</code> in the DHT keyspace with preserved preimage.\nThe raw bytes of a key in the DHT keyspace.\nA <code>Node</code> in a bucket, representing a peer participating in …\nAn immutable by-reference view of a <code>Node</code>.\nThe status of a node in a bucket.\nThe entry is pending insertion because the relevant bucket …\nThe entry is pending insertion in a bucket.\nAn entry waiting for a slot to be available in a bucket.\nThe entry is present in a bucket.\nAn entry present in a bucket.\nThe entry represents the local node.\nReturns the bucket for the distance to the given key.\nReturns an iterator over the nodes closest to the <code>target</code> …\nReturns an iterator over the keys closest to <code>target</code>, …\nTests whether the given distance falls into this bucket.\nCounts the number of nodes between the local node and the …\nComputes the distance of the keys according to the XOR …\nComputes the distance of the keys according to the XOR …\nReturns an <code>Entry</code> for the given key, representing the state …\nThe node that has been evicted from the bucket to make …\nReturns the uniquely determined key with the given …\nReturns the uniquely determined key with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns true if the bucket has a pending node.\nReturns the integer part of the base 2 logarithm of the …\nAttempts to insert the entry into a bucket.\nThe key of the inserted pending node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the key into its preimage.\nChecks whether the bucket is empty.\nReturns an iterator over the entries in the bucket.\nReturns an iterator over all buckets.\nReturns the key of the entry.\nReturns the key of the entry.\nReturns the key of the entry.\nReturns the key of the entry.\nThe key of the node, identifying the peer.\nReturns the local key.\nConstructs a new <code>Key</code> by running the given value through a …\nCreates a new key in the DHT keyspace by running the given …\nCreates a new, empty Kademlia routing table with entries …\nThe node represented by the entry.\nThe node represented by the entry.\nReturns the number of entries in the bucket.\nBorrows the preimage of the key.\nGenerates a random distance that falls into this bucket.\nReturns the minimum inclusive and maximum inclusive …\nRemoves the entry from the bucket.\nRemoves the pending entry from the bucket.\nThe status of the node identified by the key.\nThe status of the node.\nConsumes the next applied pending entry, if any.\nSets the status of the entry to the provided <code>NodeStatus</code>.\nUpdates the status of the pending entry.\nReturns the value associated with the entry.\nReturns the value associated with the key.\nReturns the value associated with the key.\nThe associated value.\nCreates an immutable by-reference view of the entry.\nThe key of the least-recently connected entry that is …\nIndicates that this list of providers is known for this …\nSender was recently connected to peer.\nSender tried to connect to peer but failed.\nSender is currently connected to peer.\nThe default maximum size for a varint length-delimited …\nThe protocol name used for negotiating with …\nRequest for the list of nodes whose IDs are the closest to …\nResponse to a <code>FindNode</code>.\nSame as <code>FindNode</code>, but should also return the entries of …\nResponse to a <code>GetProviders</code>.\nRequest to get a value from the dht records.\nResponse to a <code>GetValue</code>.\nStatus of our connection to a node reported by the …\nSink of responses and stream of requests.\nSink of requests and stream of responses.\nInformation about a peer, as known by the sender.\nRequest that we can send to a peer or that we received …\nResponse that we can send to a peer or that we received …\nConfiguration for a Kademlia connection upgrade. When …\nSender hasn’t tried to connect to peer.\nPing request.\nPing response.\nRequest to put a value into the dht records.\nResponse to a <code>PutValue</code>.\nHow the sender is connected to that remote.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe multiaddresses that the sender think can be used in …\nIdentifier of the peer.\nReturns the configured protocol name.\nModifies the maximum allowed size of a single Kademlia …\nModifies the protocol names used on the wire. Can be used …\nThe key for which to locate the closest nodes.\nIdentifier being searched.\nKey for which we should add providers.\nThe key we are searching for.\nKnown provider for this key.\nResults of the request.\nNodes closest to the key.\nNodes closest to the key\nThe key of the record.\nKnown providers for this key.\nResult that might have been found\nValue of the record.\nThe (opaque) key of a record.\nA record stored in the DHT whose value is the ID of a peer …\nA record stored in the DHT.\nThe known addresses that the provider may be listening on.\nThe expiration time as measured by a local, monotonic …\nThe expiration time as measured by a local, monotonic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the record is expired w.r.t. the given …\nChecks whether the provider record is expired w.r.t. the …\nKey of the record.\nThe key whose value is provided by the provider.\nCreates a new key from the bytes of the input.\nCreates a new record for insertion into the DHT.\nCreates a new provider record for insertion into a …\nThe provider of the value for the key.\nThe (original) publisher of the record.\nCopies the bytes of the key into a new vector.\nValue of the record.\nContains the error value\nThe possible errors of a <code>RecordStore</code> operation.\nThe store is at capacity w.r.t. the total number of stored …\nThe store is at capacity w.r.t. the total number of stored …\nIn-memory implementation of a <code>RecordStore</code>.\nConfiguration for a <code>MemoryStore</code>.\nContains the success value\nTrait for types implementing a record store.\nThe result of an operation on a <code>RecordStore</code>.\nThe store cannot store this value because it is too large.\nAdds a provider record to the store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a record from the store, given its key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of provider records for which the local …\nThe maximum number of providers stored for a key.\nThe maximum number of records.\nThe maximum size of record values, in bytes.\nCreates a new <code>MemoryRecordStore</code> with a default …\nGets an iterator over all stored provider records for …\nGets a copy of the stored provider records for the given …\nPuts a record into the store.\nGets an iterator over all (value-) records currently …\nRemoves the record with the given key from the store.\nRemoves a provider record from the store.\nRetains the records satisfying a predicate.\nCreates a new <code>MemoryRecordStore</code> with the given …\nContains the error value\nThe possible errors of a <code>RecordStore</code> operation.\nThe store is at capacity w.r.t. the total number of stored …\nThe store is at capacity w.r.t. the total number of stored …\nIn-memory implementation of a <code>RecordStore</code>.\nConfiguration for a <code>MemoryStore</code>.\nContains the success value\nTrait for types implementing a record store.\nThe result of an operation on a <code>RecordStore</code>.\nThe store cannot store this value because it is too large.\nAdds a provider record to the store.\nGets a record from the store, given its key.\nThe maximum number of provider records for which the local …\nThe maximum number of providers stored for a key.\nThe maximum number of records.\nThe maximum size of record values, in bytes.\nGets an iterator over all stored provider records for …\nGets a copy of the stored provider records for the given …\nPuts a record into the store.\nGets an iterator over all (value-) records currently …\nRemoves the record with the given key from the store.\nRemoves a provider record from the store.")