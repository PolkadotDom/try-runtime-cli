searchState.loadedDescShard("tokio_retry", 0, "This library provides extensible asynchronous retry …\nAn action can be run multiple times and produces a future.\nSpecifies under which conditions a retry is attempted.\nThe error that the future may resolve with.\nThe future that this action produces.\nThe item that the future may resolve with.\nFuture that drives multiple attempts at an action via a …\nFuture that drives multiple attempts at an action via a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssorted retry strategies including fixed interval and …\nA retry strategy driven by exponential back-off.\nA retry strategy driven by the fibonacci series.\nA retry strategy driven by a fixed interval.\nA multiplicative factor that will be applied to the retry …\nA multiplicative factor that will be applied to the retry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new exponential back-off strategy, given a …\nConstructs a new fibonacci back-off strategy, given a base …\nConstructs a new fixed interval strategy, given a duration …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApply a maximum delay. No retry delay will be longer than …\nApply a maximum delay. No retry delay will be longer than …\nConstructs a new fixed interval strategy.")