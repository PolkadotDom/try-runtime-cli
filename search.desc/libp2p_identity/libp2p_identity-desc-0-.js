searchState.loadedDescShard("libp2p_identity", 0, "A node’s network identity keys.\nAn error during decoding of key material.\nAn Ed25519 keypair.\nA public Ed25519 key.\nThe type of key a <code>KeyPair</code> is holding.\nIdentity keypair of a node.\nError produced when failing to convert <code>Keypair</code> to a more …\nIdentifier of a peer of the network.\nThe public key of a node’s identity keypair.\nAn error during signing of a message.\nEd25519 keys.\nEncode the public key into a protobuf structure for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nDecode a private key from a protobuf structure and parse …\nDecode a public key from a protobuf structure, e.g. read …\nBuilds a <code>PeerId</code> from a public key.\nGenerate a new Ed25519 keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the public key passed as parameter matches …\nGet the public key of this keypair.\nGenerates a random peer ID from a cryptographically secure …\nSign a message using the private key of this keypair, …\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nConvert the <code>PublicKey</code> into the corresponding <code>PeerId</code>.\nEncode a private key as protobuf structure.\nEncode the public key into a protobuf structure for …\nDecode a public key from a protobuf structure, e.g. read …\nTries to extract a <code>PeerId</code> from the given <code>Multiaddr</code>.\nVerify a signature for a message using this public key, …\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nDecode a keypair from the binary format produced by …\nDecode a public key from a byte array as produced by …\nEncode the keypair into a byte array by concatenating the …\nEncode the public key into a byte array in compressed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an Ed25519 secret key from a byte slice, zeroing …\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …")