searchState.loadedDescShard("orchestra", 0, "Orchestra\nA trait to support the origin annotation such that errors …\nSome other <code>Subsystem</code>’s message.\nContains the error value\nThe error type.\nA message type that a subsystem receives from an orchestra.\nPer origin (or subsystem) annotations to wrap an error.\nHigh priority.\nHigh priority.\nA helper trait to map a subsystem to smth. else.\nThe message type of this context. Subsystems launched with …\nA wrapping type for messages.\nNormal priority.\nNormal priority.\nContains the success value\nAn error type that describes faults that may happen\nAlias for a result with error type <code>OrchestraError</code>.\nThe overarching messages <code>enum</code> for this particular …\nThe output type of the mapping.\nDescribes the priority of the message.\nPriority of messages sending to the individual subsystems. …\nThe sender type as provided by <code>sender()</code> and underlying.\nSignal from the <code>Orchestra</code>.\nAnd the same for signals.\nWatermark to track the received signals.\nSame as <code>SpawnJob</code> but for blocking tasks to be executed on a\nA message that wraps something the <code>Subsystem</code> is desiring to\nAn asynchronous subsystem task..\nA spawner\nA trait that describes the <code>Subsystem</code>s that can run on the …\nA context type that is given to the <code>Subsystem</code> upon …\nIncoming messages from both the bounded and unbounded …\nA running instance of some <code>Subsystem</code>.\nSet of readouts of the <code>Meter</code>s of a subsystem.\nCollection of meters related to a subsystem.\nSender end of a channel to interface with a subsystem.\nA future that wraps another future with a <code>Delay</code> allowing …\nExtends <code>Future</code> to allow time-limited futures.\nA type of messages that are sent from a <code>Subsystem</code> to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe task of the subsystem being spawned.\nIncrease the number of signals by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the current value of received signals.\nCreate a packet from its parts.\nConsumes a <code>T</code> per subsystem, and maps it to <code>Self::Output</code>.\nThe message to be sent/consumed.\nAll meters of the particular subsystem instance.\nName of the subsystem being spawned.\nName of the subsystem instance.\nThe priority level.\nRead the values of all subsystem <code>Meter</code>s.\nReceive a signal or a message.\nReceive a signal.\nA functor to specify strategy of the channels selection in …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message to some other <code>Subsystem</code>, routed …\nSend a direct message with defined priority to some other …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend multiple direct messages to other <code>Subsystem</code>s, routed …\nSend a message onto the unbounded queue of some other …\nSend a message using the unbounded connection.\nObtain the sender.\nThe number of signals already received. Required to assure …\nSignal level at the point of reception.\nSpawn the given non-blocking future.\nSpawn a child task on the executor.\nSpawn the given blocking future.\nSpawn a blocking child task on the executor’s dedicated …\nStart this <code>Subsystem</code> and return <code>SpawnedSubsystem</code>.\nAdds a timeout of <code>duration</code> to the given <code>Future</code>. Returns a …\nTry to asynchronously receive a message.\nTries to send a direct message to some other <code>Subsystem</code>, …\nTries to send a direct message with defined priority to …\nSend sink for <code>Message</code>s to be sent to a subsystem.\nSend sink for <code>Signal</code>s to be sent to a subsystem.\nAnnotate the error with a origin <code>str</code>.\nContained message\nAn additional annotation tag for the origin of <code>source</code>.\nThe wrapped error. Marked as source for tracking the error …\nName of the task to spawn which be shown in jaeger and …\nName of the task to spawn which be shown in jaeger and …\nThe future to execute.\nThe future to execute.\nSubsystem of the task to spawn which be shown in jaeger …\nSubsystem of the task to spawn which be shown in jaeger …")